import logging
import random

from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import keyboards


logger = logging.getLogger(__name__)
router = Router()


class QuizState(StatesGroup):
    waiting_for_answer = State()

# –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
QUIZ_QUESTIONS = {
    "easy": [
        {
            "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–ª–∏–∂–µ –≤—Å–µ–≥–æ –∫ –°–æ–ª–Ω—Ü—É?",
            "options": ["–í–µ–Ω–µ—Ä–∞", "–ú–µ—Ä–∫—É—Ä–∏–π", "–ú–∞—Ä—Å", "–ó–µ–º–ª—è"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–∞–ª–∞–∫—Ç–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞—à–∞ –°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?",
            "options": ["–ê–Ω–¥—Ä–æ–º–µ–¥–∞", "–ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å", "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", "–°–æ–º–±—Ä–µ—Ä–æ"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–∞ —Å–≤–æ–∏–º–∏ –∫–æ–ª—å—Ü–∞–º–∏?",
            "options": ["–Æ–ø–∏—Ç–µ—Ä", "–£—Ä–∞–Ω", "–°–∞—Ç—É—Ä–Ω", "–ù–µ–ø—Ç—É–Ω"],
            "correct": 2
        }
    ],
    "medium": [
        {
            "question": "–ö–∞–∫–æ–π —Å–ø—É—Ç–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
            "options": ["–¢–∏—Ç–∞–Ω", "–ï–≤—Ä–æ–ø–∞", "–ì–∞–Ω–∏–º–µ–¥", "–§–æ–±–æ—Å"],
            "correct": 2
        },
        {
            "question": "–ö–∞–∫–æ–µ —Å–æ–∑–≤–µ–∑–¥–∏–µ —Ç–∞–∫–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∫ '–ë–æ–ª—å—à–æ–π –ö–æ–≤—à'?",
            "options": ["–ö–∞—Å—Å–∏–æ–ø–µ—è", "–ë–æ–ª—å—à–∞—è –ú–µ–¥–≤–µ–¥–∏—Ü–∞", "–û—Ä–∏–æ–Ω", "–õ–µ–±–µ–¥—å"],
            "correct": 1
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–≤–µ—Ç—É, —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å –ó–µ–º–ª–∏ –æ—Ç –°–æ–ª–Ω—Ü–∞?",
            "options": ["4 –º–∏–Ω—É—Ç—ã", "8 –º–∏–Ω—É—Ç", "16 –º–∏–Ω—É—Ç", "32 –º–∏–Ω—É—Ç—ã"],
            "correct": 1
        }
    ],
    "hard": [
        {
            "question": "–ö–∞–∫–æ–π –æ–±—ä–µ–∫—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–≤–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–æ–π?",
            "options": ["51 –ü–µ–≥–∞—Å–∞ b", "Kepler-186f", "HD 209458 b", "TRAPPIST-1e"],
            "correct": 0
        },
        {
            "question": "–ö–∞–∫–æ–π —Ç–∏–ø –∑–≤–µ–∑–¥—ã —Å—Ç–∞–Ω–µ—Ç –Ω–∞—à–µ –°–æ–ª–Ω—Ü–µ –≤ –∫–æ–Ω—Ü–µ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
            "options": ["–ö—Ä–∞—Å–Ω—ã–π –≥–∏–≥–∞–Ω—Ç", "–ë–µ–ª—ã–π –∫–∞—Ä–ª–∏–∫", "–ù–µ–π—Ç—Ä–æ–Ω–Ω–∞—è –∑–≤–µ–∑–¥–∞", "–ß–µ—Ä–Ω–∞—è –¥—ã—Ä–∞"],
            "correct": 1
        },
        {
            "question": "–ö–∞–∫–æ–µ —è–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å–∫—Ä–∏–≤–ª–µ–Ω–∏–µ —Å–≤–µ—Ç–∞?",
            "options": ["–ö—Ä–∞—Å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ", "–õ–∏–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ê–±–µ—Ä—Ä–∞—Ü–∏—è", "–ü–∞—Ä–∞–ª–ª–∞–∫—Å"],
            "correct": 1
        }
    ]
}

@router.message(F.text == "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞")
async def start_quiz(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üöÄ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:",
        reply_markup=keyboards.quiz_keyboard
    )

@router.callback_query(F.data.startswith("quiz_"))
async def handle_quiz_difficulty(callback: CallbackQuery, state: FSMContext):
    difficulty = callback.data.split("_")[1]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    question = random.choice(QUIZ_QUESTIONS[difficulty])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    await state.update_data(
        current_question=question,
        difficulty=difficulty,
        score=0
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer_{i}")]
            for i, option in enumerate(question["options"])
        ] + [[InlineKeyboardButton(text="¬´ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
    )
    
    await callback.message.answer(
        f"–í–æ–ø—Ä–æ—Å:\n\n{question['question']}",
        reply_markup=options_keyboard
    )
    
    await state.set_state(QuizState.waiting_for_answer)
    await callback.answer()

@router.callback_query(F.data.startswith("answer_"), QuizState.waiting_for_answer)
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    user_answer = int(callback.data.split("_")[1])
    data = await state.get_data()
    question = data["current_question"]
    
    if user_answer == question["correct"]:
        score = data.get("score", 0) + 1
        await callback.message.answer(
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É?",
            reply_markup=keyboards.quiz_keyboard
        )
    else:
        correct_answer = question["options"][question["correct"]]
        await callback.message.answer(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑?",
            reply_markup=keyboards.quiz_keyboard
        )
    
    await state.clear()
    await callback.answer()
