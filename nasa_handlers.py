"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API NASA.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º
–¥–∞–Ω–Ω—ã—Ö –æ—Ç NASA API, –≤–∫–ª—é—á–∞—è:
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∫–æ–ª–æ–∑–µ–º–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö
- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–æ–≤
- –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –ó–µ–º–ª–∏

Attributes:
    router (Router): –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å NASA API
    logger (Logger): –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥—É–ª—è
"""

import aiohttp
import asyncio
import logging
import random

from datetime import date, datetime, timedelta
from io import BytesIO
from PIL import Image
from typing import Dict, Optional, Any

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, 
    CallbackQuery,
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    BufferedInputFile
)

from config import NASA_API_KEY
from data.rovers import ROVERS
from utils.cache import cache_response
from utils.http import nasa_client
from utils.monitoring import track_performance
import keyboards


logger = logging.getLogger(__name__)
router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_IMAGE_SIZE = (1280, 1280)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
CACHE_TIME = 3600  # –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def optimize_image(image_data: bytes, max_size: tuple = (1280, 1280)) -> bytes:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    try:
        with BytesIO(image_data) as img_file:
            img = Image.open(img_file)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if img.size[0] > max_size[0] or img.size[1] > max_size[1]:
                img.thumbnail(max_size, Image.Resampling.LANCZOS)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            output = BytesIO()
            img.save(output, format='JPEG', quality=85, optimize=True)
            output.seek(0)
            return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return image_data

@router.message(CommandStart())
async def cmd_start(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –±–æ—Ç NASA. –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º:\n"
        "‚òÑÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö\n"
        "üåû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
        "üåç –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –ó–µ–º–ª–∏\n"
        "üî¥ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ú–∞—Ä—Å–∞\n"
        "‚ú® –ö–∞—Ç–∞–ª–æ–≥ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç\n"
        "‚ùì –ö–æ—Å–º–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=keyboards.main_keyboard
    )

@router.message(F.text == "‚òÑÔ∏è –ê—Å—Ç–µ—Ä–æ–∏–¥—ã")
@track_performance()
@cache_response(cache_type='asteroids')
async def get_asteroids(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö."""
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤ –≤—ã–∑–≤–∞–Ω")
    try:
        today = date.today().isoformat()
        params = {
            "api_key": NASA_API_KEY,
            "start_date": today,
            "end_date": today
        }
        
        data = await nasa_client.get("/neo/rest/v1/feed", params=params)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö: {data}")
        
        asteroids = data.get('near_earth_objects', {}).get(today, [])
        
        if not asteroids:
            await message.answer("–ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –ø–æ–¥–ª–µ—Ç–∞ –∫ –ó–µ–º–ª–µ
        asteroids.sort(
            key=lambda x: float(x['close_approach_data'][0]['miss_distance']['kilometers'])
        )
        
        logger.debug(f"–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã: {asteroids[:5]}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –ø–æ—Ä—è–¥–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        for ast in asteroids[:5]:
            try:
                await send_asteroid_info(message, ast)
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–µ {ast.get('name', 'Unknown')}: {e}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def send_asteroid_info(message: Message, ast: Dict[str, Any]) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–Ω–æ–º –∞—Å—Ç–µ—Ä–æ–∏–¥–µ."""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–µ: {ast['name']}")
        avg_size = (
            ast['estimated_diameter']['meters']['estimated_diameter_min'] +
            ast['estimated_diameter']['meters']['estimated_diameter_max']
        ) / 2
        
        text = (
            f"‚òÑÔ∏è –ê—Å—Ç–µ—Ä–æ–∏–¥: {ast['name']}\n\n"
            f"üìè –†–∞–∑–º–µ—Ä: {ast['estimated_diameter']['meters']['estimated_diameter_min']:.1f}"
            f"-{ast['estimated_diameter']['meters']['estimated_diameter_max']:.1f} –º\n"
            f"‚ö†Ô∏è –û–ø–∞—Å–µ–Ω: {'–î–∞ ‚ò¢Ô∏è' if ast['is_potentially_hazardous_asteroid'] else '–ù–µ—Ç ‚úÖ'}\n"
            f"üî∫ –ú–∞–∫—Å. —Å–±–ª–∏–∂–µ–Ω–∏–µ: {float(ast['close_approach_data'][0]['miss_distance']['kilometers']):.0f} –∫–º\n"
            f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {float(ast['close_approach_data'][0]['relative_velocity']['kilometers_per_hour']):.0f} –∫–º/—á\n"
            f"‚è∞ –í—Ä–µ–º—è —Å–±–ª–∏–∂–µ–Ω–∏—è: {ast['close_approach_data'][0]['close_approach_date_full']}"
        )
        
        logger.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer(
            text,
            parse_mode="HTML"
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–µ: {e}")
        await message.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Ç–µ—Ä–æ–∏–¥–µ {ast['name']}:\n{text}"
        )

@router.message(F.text == "üî¥ –ú–∞—Ä—Å")
@track_performance()
@cache_response(cache_type='mars_photos')
async def get_mars_photos(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ú–∞—Ä—Å–∞."""
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ú–∞—Ä—Å–∞ –≤—ã–∑–≤–∞–Ω")
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ä—Å–æ—Ö–æ–¥–∞
        buttons = []
        for rover_id, rover_info in ROVERS.items():
            if rover_id in ['curiosity', 'perseverance']:  # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä—Å–æ—Ö–æ–¥—ã
                buttons.append([InlineKeyboardButton(
                    text=f"ü§ñ {rover_info['name']}",
                    callback_data=f"get_rover_photo:{rover_id}"
                )])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await message.answer(
            "üî¥ *–ú–∞—Ä—Å–∏–∞–Ω—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—Å–æ—Ö–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤—ã–±–æ—Ä–∞ –º–∞—Ä—Å–æ—Ö–æ–¥–∞: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("get_rover_photo"))
async def get_rover_photo(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–∞."""
    try:
        await callback.answer()
        _, rover = callback.data.split(":")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ
        url = f"mars-photos/api/v1/rovers/{rover}/latest_photos"
        data = await nasa_client.get(url, params={"api_key": NASA_API_KEY})
        
        if not data.get('latest_photos'):
            await callback.message.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –º–∞—Ä—Å–æ—Ö–æ–¥–∞ {ROVERS[rover]['name']} "
                f"–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
        photo = random.choice(data['latest_photos'])
        image_data = await nasa_client.get_bytes(photo['img_src'])
        optimized_image = await optimize_image(image_data)

        caption = (
            f"üì∏ –§–æ—Ç–æ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–∞ {photo['rover']['name']}\n"
            f"üìÖ –î–∞—Ç–∞ —Å—ä—ë–º–∫–∏: {photo['earth_date']}\n"
            f"üé• –ö–∞–º–µ—Ä–∞: {photo['camera']['full_name']}\n"
            f"üìç –°–æ–ª: {photo.get('sol', 'N/A')}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ï—â—ë —Ñ–æ—Ç–æ",
                    callback_data=f"get_rover_photo:{rover}"
                )
            ]
        ])

        await callback.message.answer_photo(
            photo=BufferedInputFile(optimized_image, "mars.jpg"),
            caption=caption,
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ —Å –ú–∞—Ä—Å–∞: {e}")
        await callback.message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )



@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: Message) -> None:
    await message.answer(
        "üöÄ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚òÑÔ∏è –ê—Å—Ç–µ—Ä–æ–∏–¥—ã - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–∫–æ–ª–æ–∑–µ–º–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–∞—Ö\n"
        "üåû –°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö\n"
        "üåç –ó–µ–º–ª—è - –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –ó–µ–º–ª–∏\n"
        "üî¥ –ú–∞—Ä—Å - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –º–∞—Ä—Å–æ—Ö–æ–¥–æ–≤\n"
        "‚ú® –≠–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã - –ö–∞—Ç–∞–ª–æ–≥ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç\n"
        "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ - –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n\n"
        "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
        "/cache_clear - –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
    )

@router.message(F.text == "üåç –ó–µ–º–ª—è")
async def get_earth_image(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤ –ó–µ–º–ª–∏."""
    await message.answer(
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "latitude,longitude\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558,37.6173 (–ú–æ—Å–∫–≤–∞)",
        reply_markup=keyboards.get_back_keyboard()
    )

@router.message(F.text.regexp(r'^-?\d+\.?\d*,-?\d+\.?\d*$'))
@cache_response(cache_type='earth_imagery')
async def process_coordinates(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Å–ø—É—Ç–Ω–∏–∫–æ–≤–æ–≥–æ —Å–Ω–∏–º–∫–∞."""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_message = await message.answer("üîÑ –ü–æ–ª—É—á–∞—é —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫...")
        
        lat, lon = map(float, message.text.split(','))
        
        if not (-90 <= lat <= 90 and -180 <= lon <= 180):
            await loading_message.edit_text(
                "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã! –®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90, "
                "–¥–æ–ª–≥–æ—Ç–∞ –æ—Ç -180 –¥–æ 180."
            )
            return
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å–Ω–∞—á–∞–ª–∞
        today = date.today()
        dates_to_try = [
            today - timedelta(days=x) for x in [0, 30, 60, 90, 180]
        ]
        
        image_data = None
        used_date = None
        
        for try_date in dates_to_try:
            try:
                params = {
                    "api_key": NASA_API_KEY,
                    "lat": lat,
                    "lon": lon,
                    "dim": 0.3,
                    "date": try_date.isoformat()
                }
                
                image_data = await nasa_client.get_bytes("/planetary/earth/imagery", params=params)
                if image_data:
                    used_date = try_date
                    break
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–æ–∫ –∑–∞ {try_date}: {e}")
                continue
        
        if not image_data:
            await loading_message.edit_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã–µ —Å–Ω–∏–º–∫–∏ –¥–ª—è —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."
            )
            return
            
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        optimized_image = await optimize_image(image_data)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_message.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        caption = (
            f"üåç –°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ –ª–æ–∫–∞—Ü–∏–∏:\n"
            f"üìç –®–∏—Ä–æ—Ç–∞: {lat:.4f}¬∞\n"
            f"üìç –î–æ–ª–≥–æ—Ç–∞: {lon:.4f}¬∞\n"
            f"üìÖ –î–∞—Ç–∞ —Å–Ω–∏–º–∫–∞: {used_date.strftime('%d.%m.%Y')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await message.answer_photo(
            photo=BufferedInputFile(optimized_image, "earth.jpg"),
            caption=caption,
            reply_markup=keyboards.get_back_keyboard()
        )
            
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —à–∏—Ä–æ—Ç–∞,–¥–æ–ª–≥–æ—Ç–∞\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 55.7558, 37.6173 (–ú–æ—Å–∫–≤–∞)"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞ –ó–µ–º–ª–∏: {e}")
        await message.answer(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.callback_query(F.data == "main_menu")
async def return_to_main_menu(callback: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        reply_markup=keyboards.main_keyboard
    )
    await callback.answer()
