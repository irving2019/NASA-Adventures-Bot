"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏,
—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
"""

import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from utils.cache import caches
from utils.monitoring import monitor

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("stats"))
async def show_stats(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = monitor.get_summary()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}\n"
        text += f"üì° –í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_api_calls']}\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
        text += "üîÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:\n"
        for endpoint, data in stats['api_stats'].items():
            text += f"- {endpoint}:\n"
            text += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {data['avg_time']}\n"
            text += f"  ‚Ä¢ –ú–∞–∫—Å. –≤—Ä–µ–º—è: {data['max_time']}\n"
            text += f"  ‚Ä¢ –ú–∏–Ω. –≤—Ä–µ–º—è: {data['min_time']}\n"
            text += f"  ‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {data['calls']}\n"
        
        text += "\nüì¶ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞:\n"
        for cache_type, data in stats['cache_stats'].items():
            text += f"- {cache_type}:\n"
            text += f"  ‚Ä¢ Hit ratio: {data['hit_ratio']}\n"
            text += f"  ‚Ä¢ Hits: {data['hits']}\n"
            text += f"  ‚Ä¢ Misses: {data['misses']}\n"
        
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error showing stats: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.message(Command("cache_clear"))
async def clear_cache(message: Message) -> None:
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫—ç—à–∏ –±–æ—Ç–∞.
    
    Args:
        message (Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏
        for cache_type, cache in caches.items():
            cache.clear()
        
        await message.answer("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞.")
