"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞–Ω–µ—Ç–∞—Ö.
"""

import aiohttp
import logging
import keyboards

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from data.planets import SOLAR_SYSTEM, EXOPLANETS
from utils.cache import cache_response
from utils.monitoring import track_performance

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.text == "üåû –°–æ–ª–Ω–µ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞")
async def show_planets(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=keyboards.get_planets_keyboard()
    )

@router.message(F.text == "‚ú® –≠–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã")
@track_performance()
async def show_exoplanets(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç."""
    try:
        await message.answer(
            "üåå –í—ã–±–µ—Ä–∏—Ç–µ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=keyboards.exoplanets_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("planet_"))
async def planet_info(callback: CallbackQuery):
    try:
        planet_id = callback.data.split("_")[1]
        if planet_id in SOLAR_SYSTEM:
            planet = SOLAR_SYSTEM[planet_id]
            info = (f"{planet['name']}\n\n"
                   f"üîπ –¢–∏–ø: {planet['type']}\n"
                   f"üîπ –ú–∞—Å—Å–∞: {planet['mass']}\n"
                   f"üîπ {'–î–∏–∞–º–µ—Ç—Ä' if 'diameter' in planet else '–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}: "
                   f"{planet.get('diameter', planet.get('orbit'))}\n"
                   f"üîπ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {planet['temperature']}\n\n"
                   f"üìù {planet['description']}")
            
            try:
                await callback.message.answer_photo(
                    photo=planet['image'],
                    caption=info
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–ª–∞–Ω–µ—Ç—ã {planet_id}: {str(e)}")
                await callback.message.answer(info)
        else:
            logger.error(f"–ü–ª–∞–Ω–µ—Ç–∞ {planet_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞–Ω–µ—Ç–µ: {str(e)}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await callback.answer()

@router.callback_query(F.data.startswith("exo_"))
@track_performance()
@cache_response(cache_type='exoplanet_info')
async def show_exoplanet_info(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–µ."""
    try:
        await callback.answer()
        exo_id = callback.data.replace("exo_", "").lower()
        if exo_id in EXOPLANETS:
            planet = EXOPLANETS[exo_id]
            description = (f"{planet['name']}\n\n"
                f"üåç –¢–∏–ø: {planet['type']}\n"
                f"üìè –ú–∞—Å—Å–∞: {planet['mass']}\n"
                f"üåü –ó–≤–µ–∑–¥–∞: {planet['star']}\n"
                f"üìÖ –ì–æ–¥: {planet['year']}\n"
                f"üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {planet['distance']}\n"
                f"üå´Ô∏è –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {planet['atmosphere']}\n"
                f"üåê –ò–Ω–¥–µ–∫—Å —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –ó–µ–º–ª–µ–π (ESI): {planet['esi']}\n\n"
                f"üìù {planet['description']}")

            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.get(planet['image']) as response:
                        if response.status == 200:
                            image_data = await response.read()
                            await callback.message.answer_photo(
                                photo=BufferedInputFile(image_data, f"{exo_id}.jpg"),
                                caption=description,
                                reply_markup=keyboards.get_back_keyboard()
                            )
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {planet['image']}: {response.status}")
                            await callback.message.answer(
                                text=f"{description}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                                reply_markup=keyboards.get_back_keyboard()
                            )
            except Exception as img_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç—ã: {img_error}")
                await callback.message.answer(
                    text=f"{description}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    reply_markup=keyboards.get_back_keyboard()
                )
        else:
            await callback.message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–∫–∑–æ–ø–ª–∞–Ω–µ—Ç–µ: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
